buildscript {

    // gradle仓库的依赖源
    repositories {
        maven{ url 'https://maven.aliyun.com/repository/central' }
        maven{ url 'https://maven.aliyun.com/repository/public' }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${springBootManagementVersion}")
        classpath("com.github.node-gradle:gradle-node-plugin:${gradeNodePlugin}")
    }

}

allprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'idea'

    group = 'org.shanzhaozhen'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    // gradle仓库的依赖源
    repositories {
        maven{ url 'https://maven.aliyun.com/repository/central' }
        maven{ url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
        mavenLocal()
    }
}

subprojects {

    // java编译的时候缺省状态下会因为中文字符而失败，所以这儿需要改为utf8
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        compileOnly {
            // lombok 配置
            extendsFrom annotationProcessor
        }
    }

    // gradle仓库的依赖源
    repositories {
        maven{ url 'https://maven.aliyun.com/repository/central' }
        maven{ url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
        mavenLocal()
    }

    dependencies {
//        implementation(
//                'org.springframework.boot:spring-boot-starter-web',
//                "io.springfox:springfox-boot-starter:${springFoxVersion}",
//        )

        compileOnly 'org.projectlombok:lombok'

        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        annotationProcessor(
                'org.projectlombok:lombok',
                'org.springframework.boot:spring-boot-configuration-processor'
        )

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.security:spring-security-bom:${springSecurityVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
        }
    }

    test {
        useJUnitPlatform()
    }

}

